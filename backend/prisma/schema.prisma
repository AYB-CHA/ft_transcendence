// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  FT
  GITHUB
}

enum UserStatus {
  ONLINE
  IN_GAME
  OFFLINE
}

model User {
  id       String  @id @default(uuid())
  username String  @unique
  email    String  @unique
  fullName String
  password String?
  avatar   String

  authProvider AuthProvider?

  ftId     Int?
  githubId Int?

  optSecret    String
  is2FAEnabled Boolean @default(false)

  status UserStatus @default(OFFLINE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channels                   ChannelsOnUsers[]
  Messages                   Messages[]
  sentDMMessages             DMMessage[]
  initaitedDMThreads         DMThread[]           @relation(name: "initiator_relation")
  secondDMThreads            DMThread[]           @relation(name: "participant_relation")
  blocked                    UserBlock[]          @relation(name: "blocker_relation")
  wasBlocked                 UserBlock[]          @relation(name: "blocked_relation")
  sentFriendRequests         Friendship[]         @relation(name: "sentFriendRequests")
  receivedFriendRequests     Friendship[]         @relation(name: "receivedFriendRequests")
  sentNotifications          Notification[]       @relation(name: "sentNotifications")
  receivedNotifications      Notification[]       @relation(name: "receivedNotifications")
  sentChannelInvitations     ChannelInvitations[] @relation(name: "sender_relation")
  receivedChannelInvitations ChannelInvitations[] @relation(name: "recipient_relation")
  myIntiatedMatches          Match[]              @relation(name: "initiator_match_relation")
  myForeignMatches           Match[]              @relation(name: "participant_match_relation")
}

model UserBlock {
  blocker_id String
  blocked_id String
  Blocker    User   @relation(fields: [blocker_id], references: [id], name: "blocker_relation")
  Blocked    User   @relation(fields: [blocked_id], references: [id], name: "blocked_relation")

  @@id([blocked_id, blocker_id])
}

model Friendship {
  id         String  @id @unique @default(uuid())
  senderId   String
  receiverId String
  isPending  Boolean @default(true)
  sender     User    @relation(name: "sentFriendRequests", fields: [senderId], references: [id])
  receiver   User    @relation(name: "receivedFriendRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

enum ChannelType {
  PUBLIC
  PRIVATE
  PROTECTED
}

model Channel {
  id     String @id @default(uuid())
  name   String
  avatar String
  topic  String

  type     ChannelType @default(PUBLIC)
  password String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users           ChannelsOnUsers[]
  Messages        Messages[]
  Invitations     ChannelInvitations[]
  sentInvitations Notification[]
}

enum ChannelUserRole {
  ADMINISTRATOR
  MODERATOR
  MEMBER
}

model ChannelsOnUsers {
  Channel    Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId  String
  User       User      @relation(fields: [userId], references: [id])
  userId     String
  banedAt    DateTime?
  mutedUntil DateTime?

  role ChannelUserRole @default(MEMBER)

  createdAt DateTime @default(now())

  @@id([userId, channelId])
}

model Messages {
  id        Int      @id @unique @default(autoincrement())
  text      String
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channelId String
  Channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model DMThread {
  id            String @id @default(uuid())
  initiatorId   String
  participantId String

  initiator   User        @relation(fields: [initiatorId], references: [id], name: "initiator_relation")
  participant User        @relation(fields: [participantId], references: [id], name: "participant_relation")
  messages    DMMessage[]

  @@unique([initiatorId, participantId])
}

model DMMessage {
  id       Int    @id @unique @default(autoincrement())
  text     String
  senderId String

  seen Boolean @default(false)

  sender   User     @relation(fields: [senderId], references: [id])
  threadId String
  thread   DMThread @relation(fields: [threadId], references: [id])

  createdAt DateTime @default(now())
}

model Notification {
  id         String           @id @unique @default(uuid())
  link       String
  read       Boolean          @default(false)
  type       NotificationType
  senderId   String
  receiverId String
  channelId  String?
  createdAt  DateTime         @default(now())
  sender     User             @relation(fields: [senderId], references: [id], name: "sentNotifications")
  receiver   User             @relation(fields: [receiverId], references: [id], name: "receivedNotifications")
  channel    Channel?         @relation(fields: [channelId], references: [id])
}

enum NotificationType {
  CHANNEL_INVITATION
  FRIEND_INVITAION
  GAME_INVITAION
}

model ChannelInvitations {
  id String @id @unique @default(uuid())

  channelId String
  Channel   Channel @relation(fields: [channelId], references: [id])

  senderId String
  Sender   User   @relation(fields: [senderId], references: [id], name: "sender_relation")

  recipientId String
  Recipient   User   @relation(fields: [recipientId], references: [id], name: "recipient_relation")
}

enum MatchStatus {
  READY
  WAITING
  PLAYING
  FINISHED
  UNFINISHED
}

model Match {
  id            String @id @unique @default(uuid())
  initiatorId   String
  participantId String

  initiator   User @relation(fields: [initiatorId], references: [id], name: "initiator_match_relation")
  participant User @relation(fields: [participantId], references: [id], name: "participant_match_relation")

  initiatorScore   Int @default(0)
  participantScore Int @default(0)

  initiatorStatus   MatchStatus @default(READY)
  participantStatus MatchStatus @default(READY)

  status MatchStatus @default(READY)

  createdAt DateTime @default(now())
  endedAt   DateTime?
}
